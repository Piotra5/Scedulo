@using System.Globalization;
@inject NavigationManager  NavigationManager

<div class="calendar-main main container">
    <div class="clearfix mb-1">
        <button type="button" class="btn btn-secondary float-left"> &larr; Previous</button>
        <button type="button" class="btn btn-secondary float-right"> Next &rarr; </button>
    </div>
    <div class="container">
        <div class="row">
            <div class="col border text-center"><h6>Mon</h6></div>
            <div class="col border text-center"><h6>Tue</h6></div>
            <div class="col border text-center"><h6>Wen</h6></div>
            <div class="col border text-center"><h6>Thu</h6></div>
            <div class="col border text-center"><h6>Fri</h6></div>
            <div class="col border text-center"><h6>Sat</h6></div>
            <div class="col border text-center"><h6>Sun</h6></div>
        </div>
        @for (int r = 0; r < 6; r++)
        {
            <div class="row">
                @for (int i = 0; i < 7; i++)
                {
                    var c = Counter;
                    var date = CurrentMonth[Counter];
                    <div class="col border text-center">
                        <a href="/data/details/@String.Format("{0:yyyy-MM-dd}", date)"><h6>@date.Day.ToString()</h6></a>
                    </div>
                    Counter++;
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public DateTime calendarDate { get; set; }

    int DayOfWeek { get; set; }
    int DaysInCurrentMonth { get; set; }
    int DaysInPreviousMonth { get; set; }
    int DayInMonth { get; set; }

    CultureInfo invC = CultureInfo.InvariantCulture;

    DateTime TodaysDate { get; set; }
    DateTime FirstDayOfMonth { get; set; }
    DateTime LastDayOfMonth { get; set; }
    int FirstDayNumber { get; set; }
    int LastDayNumber { get; set; }
    bool IsFirstDayMonday { get; set; }
    int FirstDayOfNextMonthNumber { get; set; }

    List<DateTime> CurrentMonth { get; set; }
    //List<DateTime> PreviousMonth { get; set; }
    //List<DateTime> NextMonth { get; set; }
    int Counter { get; set; }


    protected override void OnInitialized()
    {
        TodaysDate = WhatsTodaysDate();
        DayOfWeek = WhatDayInWeek(calendarDate);
        DayInMonth = CountDay();
        DaysInCurrentMonth = HowManyDaysInMonth(calendarDate.Year, calendarDate.Month);
        DaysInPreviousMonth = HowManyDaysInMonth(calendarDate.Year - 1, calendarDate.Month - 1);
        FirstDayOfMonth = WhatsFirstDayOfMonth(calendarDate);
        CurrentMonth = GetDaysForCalendar(calendarDate.Year, calendarDate.Month);

        FirstDayNumber = (int)FirstDayOfMonth.DayOfWeek;
        LastDayOfMonth = WhatsLastDayOfMonth(calendarDate);
        FirstDayOfNextMonthNumber = (int)WhatsFirstDayOfMonth(calendarDate.AddMonths(1)).DayOfWeek;
        LastDayNumber = (int)LastDayOfMonth.DayOfWeek;
        IsFirstDayMonday = (FirstDayNumber == 1);
        Counter = 0;
    }

    DateTime WhatsTodaysDate()
    {
        return DateTime.Today;
    }

    int CountDay()
    {
        return DateTime.Today.Day;
    }

    int WhatDayInWeek(DateTime day)
    {
        return (int)day.DayOfWeek;
    }

    int HowManyDaysInMonth(int year, int month)
    {
        return DateTime.DaysInMonth(year, month);
    }

    DateTime WhatsFirstDayOfMonth(DateTime calendarDate)
    {
        return new DateTime(calendarDate.Year, calendarDate.Month, 1);
    }

    DateTime WhatsLastDayOfMonth(DateTime calendarDate)
    {
        DateTime firstOfNextMonth = new DateTime(calendarDate.Year, calendarDate.Month, 1).AddMonths(1);
        return firstOfNextMonth.AddDays(-1);

    }

    public static List<DateTime> GetDates(int year, int month)
    {
        return Enumerable.Range(1, DateTime.DaysInMonth(year, month))  // Days: 1, 2 ... 31 etc.
                         .Select(day => new DateTime(year, month, day)) // Map each day to a date
                         .ToList(); // Load dates into a list
    }

    public void ShowDayDetails(int day, int row)
    {
        var date = new DateTime(2019, 10, day);

        if (row == 0 && day > 20)
        {
            date.AddMonths(-1);
        }
        else if (row == 5 && day < 10)
        {
            date.AddMonths(1);
        }
        var dateS = date.ToString();
        NavigationManager.NavigateTo($"day/" + dateS);
    }

    //TODO: While doing API design one getter to get data to match this List =>
    public List<DateTime> GetDaysForCalendar(int year, int month)
    {
        var dates = new List<DateTime>();
        var firstDay = new DateTime(year, month, 1);
        var start = firstDay.AddDays(-(int)firstDay.DayOfWeek + 1);
        var end = start.AddDays(43);
        for (var dt = start; dt <= end; dt = dt.AddDays(1))
        {
            dates.Add(dt);
        }
        return dates;
    }

    public void ChoosedDate(DateTime date)
    {
        NavigationManager.NavigateTo($"day/" + date);
    }
}
